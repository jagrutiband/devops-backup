AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  VPCId:
    Type: String
    Description: "Enter the VPC ID"

  PublicSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: "Enter the list of public subnet IDs"
  
  MySQLHost:
    Type: String
    Description: "Hostname or IP address of the OCI MySQL database"

  MySQLUsername:
    Type: String
    Description: "Username for the MySQL database"

  MySQLPassword:
    Type: String
    Description: "Password for the MySQL database"

  MySQLDatabase:
    Type: String
    Description: "Name for the MySQL database"

  GitSSMParameterName:
    Type: String
    Description: "Name of the SSM parameter containing the Git SSH private key"
    Default: "your parameter name"  # Provide the default value for your SSM parameter

  SSHTunnelSSMParameterName:
    Type: String
    Description: "Name of the SSM parameter containing the SSH Tunnel private key"
    Default: "your parameter name"  # Provide the default value for your SSM parameter

Resources:
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow SSH, HTTP, HTTPS and MySQL"
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0  # Allow SSH from anywhere
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0  # Allow HTTP from anywhere
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0  # Allow HTTPS from anywhere
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0  # Allow HTTPS from anywhere
          
  EventServerIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SSMParameterAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                - ssm:GetParameter
                Resource:
                - !Sub "arn:aws:ssm:*:*:parameter/${GitSSMParameterName}"
                - !Sub "arn:aws:ssm:*:*:parameter/${SSHTunnelSSMParameterName}"

  EventServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EventServerIAMRole

  EventServerLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-0c7217cdde317cfec  # Specify the appropriate AMI for your event server
      InstanceType: t2.medium
      KeyName: CFM-ASG
      SecurityGroups:
        - !Ref SecurityGroup
      IamInstanceProfile: !Ref EventServerInstanceProfile
      UserData:
        Fn::Base64: |
          #!/bin/bash
          exec > /tmp/userdata.log 2>&1  # Redirect all output to a log file for debugging

          # Set HOME environment variable
          export HOME=/root
          export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

          # Install nodejs and npm        
          sudo apt update
          NODE_INSTALL_DIR="/usr/local"
          NODE_VERSION="v18.12.1"
          NODE_ARCHIVE="node-${NODE_VERSION}-linux-x64.tar.xz"
          NODE_URL="https://nodejs.org/dist/${NODE_VERSION}/${NODE_ARCHIVE}"
          curl -fsSL "$NODE_URL" -o "/tmp/${NODE_ARCHIVE}"
          sudo mkdir -p "$NODE_INSTALL_DIR"
          sudo tar -xvf "/tmp/${NODE_ARCHIVE}" -C "$NODE_INSTALL_DIR" --strip-components=1
          sudo ln -s "${NODE_INSTALL_DIR}/bin/node" /usr/bin/node
          sudo ln -s "${NODE_INSTALL_DIR}/bin/npm" /usr/bin/npm
          sudo apt update
          sudo apt install -y npm
          sudo apt update
          sudo apt install -y python3.8
          sudo apt update
          sudo apt install -y ffmpeg
          sudo apt update
          sudo apt install -y nginx
          sudo systemctl start nginx
          sudo npm install -g pm2
          sudo apt update
          sudo apt install -y git
          sudo apt update
          sudo apt install -y mysql-client

          sudo apt install -y awscli
          aws configure set default.region us-east-1

          #Fetch and write the SSH private key directly to /root/.ssh/CFM-ASG.pem
          aws ssm get-parameter --name CFM-ASG --with-decryption --query "Parameter.Value" --output text > /root/.ssh/CFM-ASG.pem
          
          # Set MySQL credentials
          MYSQL_HOST=${MySQLHost}
          MYSQL_USER=${MySQLUsername}
          MYSQL_PASSWORD=${MySQLPassword}
          MYSQL_DATABASE=${MySQLDatabase}

          sudo chmod 600 /root/.ssh/CFM-ASG.pem

          # Add GitHub to the list of known hosts
          ssh-keyscan github.com >> /root/.ssh/known_hosts

          # Start SSH agent and add the private key
          eval $(ssh-agent -s)
          ssh-add /root/.ssh/CFM-ASG.pem

          sudo apt update
          sudo apt install net-tools
          
          # Create SSH tunnel to MySQL
          sudo ssh -fNL 3306:${MYSQL_HOST}:3306 -i /root/.ssh/CFM-ASG.pem -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o ServerAliveCountMax=10 ${MYSQL_USER}@${MYSQL_HOST} -T

          #Fetch and write the SSH private key directly to /root/.ssh/id_rsa
          sudo aws ssm get-parameter --name Git-CFM --with-decryption --query "Parameter.Value" --output text > /root/.ssh/id_rsa

          sudo chmod 600 /root/.ssh/id_rsa

          # Add GitHub to the list of known hosts
          ssh-keyscan github.com >> /root/.ssh/known_hosts

          # Start SSH agent and add the private key
          eval $(ssh-agent -s)
          ssh-add /root/.ssh/id_rsa

          sudo git config --global core.sshCommand "ssh -i /root/.ssh/id_rsa -o StrictHostKeyChecking=no"

          sudo mkdir -p /var/www/code/
          sudo chown -R root:root /var/www/code/

          # Clone the private GitHub repository
          sudo git clone git@github.com:videomagicllc/videomagic-event-server.git /var/www/code/

  EventServerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref EventServerLaunchConfiguration
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 2
      VPCZoneIdentifier: !Ref PublicSubnetIds  # Reference the parameter for subnet IDs
      Tags:
        - Key: Name
          Value: event-server
          PropagateAtLaunch: true
